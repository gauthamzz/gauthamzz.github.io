(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{182:function(e,t,o){"use strict";o.r(t);var r=o(0),n=Object(r.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[e._m(0),e._v(" "),o("p",[e._v("List of most commonly asked questions on stack overflow about git.")]),e._v(" "),o("hr"),e._v(" "),o("h2",{attrs:{id:"how-do-i-undo-the-most-recent-commits-in-git"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-do-i-undo-the-most-recent-commits-in-git","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("a",{attrs:{href:"https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-commits-in-git",target:"_blank",rel:"noopener noreferrer"}},[e._v("How do I undo the most recent commits in Git?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("by "),o("a",{attrs:{href:"https://stackoverflow.com/users/1709587/mark-amery",target:"_blank",rel:"noopener noreferrer"}},[e._v("Mark Amery"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("Undo a commit and redo")]),e._v(" "),e._m(1),e._m(2),e._v(" "),e._m(3),e._v(" "),o("p",[e._v("If the code is already pushed to your server and you have permissions to overwrite history (rebase) then:")]),e._v(" "),e._m(4),e._v(" "),o("hr"),e._v(" "),o("p",[o("a",{attrs:{href:"https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head/34519716#34519716",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to move HEAD back to a previous location? (Detached head)"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("The above answer will show you git reflog which is used to find out what is the SHA-1 which you wish to revert to. Once you found the point to which you wish to undo to use the sequence of commands as explained above.")]),e._v(" "),o("p",[e._v("1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message. The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend, which will open your default commit message editor pre-populated with the last commit message")]),e._v(" "),o("h2",{attrs:{id:"how-do-i-delete-a-git-branch-both-locally-and-remotely"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-do-i-delete-a-git-branch-both-locally-and-remotely","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("a",{attrs:{href:"https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-remotely",target:"_blank",rel:"noopener noreferrer"}},[e._v("How do I delete a Git branch both locally and remotely?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("by "),o("a",{attrs:{href:"https://stackoverflow.com/users/95592/matthew-rankin",target:"_blank",rel:"noopener noreferrer"}},[e._v("Matthew Rankin"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("Executive Summary")]),e._v(" "),e._m(5),o("p",[e._v("Note that in most cases the remote name is origin.")]),e._v(" "),o("p",[e._v("Delete Local Branch\nTo delete the local branch use one of the following:")]),e._v(" "),e._m(6),e._m(7),e._v(" "),o("p",[e._v("Delete Remote Branch [Updated on 8-Sep-2017]\nAs of Git v1.7.0, you can delete a remote branch using")]),e._v(" "),e._m(8),o("p",[e._v("which might be easier to remember than")]),e._v(" "),e._m(9),o("p",[e._v('which was added in Git v1.5.0 "to delete a remote branch or a tag."')]),e._v(" "),o("p",[e._v("Starting on Git v2.8.0 you can also use git push with the -d option as an alias for --delete.")]),e._v(" "),o("p",[e._v("Therefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.")]),e._v(" "),o("p",[e._v("Delete Remote Branch [Original Answer from 5-Jan-2010]\nFrom Chapter 3 of Pro Git by Scott Chacon:")]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),o("p",[e._v("Then you should execute this on other machines")]),e._v(" "),e._m(13),e._v(" "),o("h2",{attrs:{id:"what-is-the-difference-between-git-pull-and-git-fetch"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#what-is-the-difference-between-git-pull-and-git-fetch","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("a",{attrs:{href:"https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch",target:"_blank",rel:"noopener noreferrer"}},[e._v("What is the difference between 'git pull' and 'git fetch'?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("by "),o("a",{attrs:{href:"https://stackoverflow.com/users/893/greg-hewgill",target:"_blank",rel:"noopener noreferrer"}},[e._v("Greg Hewgill"),o("OutboundLink")],1)]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),o("p",[e._v("Git documentation: "),o("a",{attrs:{href:"https://git-scm.com/docs/git-pull",target:"_blank",rel:"noopener noreferrer"}},[e._v("git pull"),o("OutboundLink")],1)]),e._v(" "),o("h2",{attrs:{id:"how-to-undo-git-add-before-commit"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-to-undo-git-add-before-commit","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("a",{attrs:{href:"https://stackoverflow.com/questions/348170/how-to-undo-git-add-before-commit",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to undo 'git add' before commit?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("by "),o("a",{attrs:{href:"https://stackoverflow.com/users/39933/genehack",target:"_blank",rel:"noopener noreferrer"}},[e._v("genehack"),o("OutboundLink")],1),e._v("\nYou can undo git add before commit with")]),e._v(" "),e._m(18),e._v(" "),o("p",[e._v("You can use")]),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),o("h2",{attrs:{id:"how-do-i-rename-a-local-git-branch"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-do-i-rename-a-local-git-branch","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("a",{attrs:{href:"https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch",target:"_blank",rel:"noopener noreferrer"}},[e._v("How do I rename a local Git branch?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("by "),o("a",{attrs:{href:"https://stackoverflow.com/users/394487/siride",target:"_blank",rel:"noopener noreferrer"}},[e._v("siride"),o("OutboundLink")],1),e._v("\nIf you want to rename a branch while pointed to any branch, do:")]),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),o("hr"),e._v(" "),o("h2",{attrs:{id:"how-to-remove-local-untracked-files-from-the-current-git-working-tree"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-to-remove-local-untracked-files-from-the-current-git-working-tree","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("a",{attrs:{href:"https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to remove local (untracked) files from the current Git working tree?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("As per the Git Documentation "),o("a",{attrs:{href:"https://git-scm.com/docs/git-clean",target:"_blank",rel:"noopener noreferrer"}},[e._v("git clean"),o("OutboundLink")],1)]),e._v(" "),e._m(24),e._v(" "),o("p",[e._v("Step 1 is to show what will be deleted by using the -n option:")]),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),o("p",[e._v("Again see the git-clean docs for more information.")]),e._v(" "),o("p",[e._v("Options\n-f")]),e._v(" "),o("p",[e._v("--force")]),e._v(" "),o("p",[e._v("If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to run unless given -f, -n or -i.")]),e._v(" "),o("p",[e._v("-x")]),e._v(" "),o("p",[e._v("Don’t use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore rules given with -e options. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with git reset) to create a pristine working directory to test a clean build.")]),e._v(" "),o("p",[e._v("-X")]),e._v(" "),o("p",[e._v("Remove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files.")]),e._v(" "),o("p",[e._v("-n")]),e._v(" "),o("p",[e._v("--dry-run")]),e._v(" "),o("p",[e._v("Don’t actually remove anything, just show what would be done.")]),e._v(" "),o("p",[e._v("-d")]),e._v(" "),o("p",[e._v("Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default. Use -f option twice if you really want to remove such a directory.")]),e._v(" "),o("h2",{attrs:{id:"how-do-i-check-out-a-remote-git-branch"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-do-i-check-out-a-remote-git-branch","aria-hidden":"true"}},[e._v("#")]),e._v(" "),o("a",{attrs:{href:"https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch",target:"_blank",rel:"noopener noreferrer"}},[e._v("How do I check out a remote Git branch?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("For a given branch called test")]),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),o("p",[e._v("DISCLAIMER: I don't own rights to any of this answers and all of it are from stackover. I just listed them for easy reading.")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"common-git-questions-and-answers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#common-git-questions-and-answers","aria-hidden":"true"}},[this._v("#")]),this._v(" Common git questions and answers")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('$ git commit -m "Something terribly misguided"             \n$ git reset HEAD~                                          \n<< edit files as necessary >>                              \n$ git add ...                                              \n$ git commit -c ORIG_HEAD                                  \n')])])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ol",[o("li",[o("p",[e._v("This is what you want to undo.")])]),e._v(" "),o("li",[o("p",[e._v('This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they\'ll appear as "Changes not staged for commit" in '),o("code",[e._v("git status")]),e._v(", so you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message1, you could use git reset --soft HEAD~ instead, which is like "),o("code",[e._v("git reset HEAD~")]),e._v(" (where HEAD~ is the same as HEAD~1) but leaves your existing changes staged.")])]),e._v(" "),o("li",[o("p",[e._v("Make corrections to working tree files.")])]),e._v(" "),o("li",[o("p",[e._v("git add anything that you want to include in your new commit.")])]),e._v(" "),o("li",[o("p",[e._v("Commit the changes, reusing the old commit message. "),o("code",[e._v("reset")]),e._v(" copied the old head to "),o("code",[e._v(".git/ORIG_HEAD; commit with -c ORIG_HEAD")]),e._v(" will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Beware however that if you have added any new changes to the index, using "),t("code",[this._v("commit --amend")]),this._v(" will add them to your previous commit.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git push origin master --force")]),this._v("\nYou can also look at this answer:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ git push --delete <remote_name> <branch_name>\n$ git branch -d <branch_name>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ git branch -d branch_name\n$ git branch -D branch_name\n")])])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("Note: The "),o("code",[e._v("-d")]),e._v(" option is an alias for "),o("code",[e._v("--delete")]),e._v(", which only deletes the branch if it has already been fully merged in its upstream branch. You could also use "),o("code",[e._v("-D")]),e._v(", which is an alias for "),o("code",[e._v("--delete --force")]),e._v(', which deletes the branch "irrespective of its merged status." [Source: man git-branch]')])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ git push <remote_name> --delete <branch_name>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("$ git push <remote_name> :<branch_name>\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("Deleting Remote Branches\nSuppose you’re done with a remote branch — say, you and your collaborators are finished with a feature and have merged it into your remote’s master branch (or whatever branch your stable code-line is in). You can delete a remote branch using the rather obtuse syntax "),t("code",[this._v("git push [remotename] :[branch]")]),this._v(". If you want to delete your server-fix branch from the server, you run the following:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("$ "),t("code",[this._v("git push origin :serverfix")]),this._v("\nTo git@github.com:schacon/simplegit.git\n- [deleted]         serverfix\nBoom. No more branch on your server. You may want to dog-ear this page, because you’ll need that command, and you’ll likely forget the syntax. A way to remember this command is by recalling the git push [remotename] [localbranch]:[remotebranch] syntax that we went over a bit earlier. If you leave off the [localbranch] portion, then you’re basically saying, “Take nothing on my side and make it be [remotebranch].”")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("I issued "),t("code",[this._v("git push origin :bugfix")]),this._v(" and it worked beautifully. Scott Chacon was right—I will want to dog ear that page (or virtually dog ear by answering this on Stack Overflow).")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git fetch --all --prune")]),this._v("\nto propagate changes.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In the simplest terms, "),t("code",[this._v("git pull")]),this._v(" does a "),t("code",[this._v("git fetch")]),this._v(" followed by a "),t("code",[this._v("git merge")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("You can do a "),t("code",[this._v("git fetch")]),this._v(" at any time to update your remote-tracking branches under "),t("code",[this._v("refs/remotes/<remote>/")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This operation never changes any of your own local branches under "),t("code",[this._v("refs/heads")]),this._v(", and is safe to do without changing your working copy. I have even heard of people running "),t("code",[this._v("git fetch")]),this._v(" periodically in a cron job in the background (although I wouldn't recommend doing this).")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("A "),t("code",[this._v("git pull")]),this._v(" is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git reset <file>")]),this._v('\nwhich will remove it from the current index (the "about to be committed" list) without changing anything else.')])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git reset")]),this._v("\nwithout any file name to unstage all due changes. This can come in handy when there are too many files to be listed one by one in a reasonable amount of time.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In old versions of Git, the above commands are equivalent to "),t("code",[this._v("git reset HEAD <file>")]),this._v(" and "),t("code",[this._v("git reset HEAD")]),this._v(" respectively, and will fail if HEAD is undefined (because you haven't yet made any commits in your repo) or ambiguous (because you created a branch called "),t("code",[this._v("HEAD")]),this._v(", which is a stupid thing that you shouldn't do). This was changed in Git 1.8.2, though, so in modern versions of Git you can use the commands above even prior to making your first commit:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[t("code",[this._v("git reset")]),this._v(" (without options or parameters) used to error out when you do not have any commits in your history, but it now gives you an empty index (to match non-existent commit you are not even on).")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git branch -m <oldname> <newname>")]),this._v("\nIf you want to rename the current branch, you can do:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git branch -m <newname>")]),this._v('\nA way to remember this, is -m is for "move" (or mv), which is how you rename files.')])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("Remove untracked files from the working tree")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git clean -n")]),this._v("\nClean Step - beware: this will delete files:")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[o("code",[e._v("git clean -f")]),e._v("\nTo remove directories, run "),o("code",[e._v("git clean -f -d")]),e._v(" or "),o("code",[e._v("git clean -fd")]),e._v("\nTo remove ignored files, run "),o("code",[e._v("git clean -f -X")]),e._v(" or "),o("code",[e._v("git clean -fX")]),e._v("\nTo remove ignored and non-ignored files, run "),o("code",[e._v("git clean -f -x")]),e._v(" or "),o("code",[e._v("git clean -fx")]),e._v("\nNote the case difference on the "),o("code",[e._v("X")]),e._v(" for the two latter commands.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("If "),t("code",[this._v("clean.requireForce")]),this._v(' is set to "true" (the default) in your configuration, one needs to specify '),t("code",[this._v("-f")]),this._v(" otherwise nothing will actually happen.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git fetch")]),this._v(" "),t("code",[this._v("git checkout test")]),this._v("\ngit checkout test will NOT work in modern git if you have multiple remotes. In this case use")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git checkout -b test <name of remote>/test")]),this._v("\nor the shorthand")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("git checkout -t <name of remote>/test")])])}],!1,null,null,null);t.default=n.exports}}]);